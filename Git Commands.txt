Git Commands

git init                           - initialize the repository.
git add .                          - add all the files that were changed since the last back up to the staging area.
git status                         - shows you all the files that were changed since the last backup and which ones are already added to the staging area.
git commit -m "..."                - commits the changes to the repository.
git checkout ____                  - switches to the branch name provided in your git repository. 
git checkout -b branchName         -    This will create a new branch if the name provided doesn't exist.
git branch                         - shows all of your git branches and marks the one you are currently on.
git log                            - shows all the backups created in the repository.
git blame ____                     - shows who wrote which line of code or in other words who is to be blamed for that particular line of code.
git remote add origin ____         - tells git to add a remote place called 'origin' to a remote URL ___.
git push                           - pushes the changes in your local repository to the remote repository.
git pull                           - pulls the changes in a remote repository to your own local repository.
git clone ___                      - clones a remote repository in ___ to your own local folder.
git log                            -    Git shows each new commit’s log entry, along with who made the commit, when, and optionally the changes that were made.
git diff --stat commitCode         -    There’s another cool option for git diff that prints some statistics about the changes that have been made. Just add the --stat option to see what changes have been made since a particular commit.

git remote add origin https://github.com/<github username>/<github repo name>.git

git push origin master             -     EX:git remote add origin https://github.com/purpleshoelace/git-demo.git
git clone <URL of repository>      -    EX: git clone https://github.com/purpleshoelace/git-demo.git
git checkout -b BRANCHNAME         -    Create branches off from develop for fixes or features, and then push to the develop branch (Step 3).
git checkout BRANCHNAME            -    Move to different branches:
git branch                         -    Check your current branch:
git pull origin develop            -    Before merging, grab all of the updates from the develop branch onto your own branch and resolve any conflicts.
git checkout develop               -    Conflicts will be noted in the terminal. Open the noted local files to resolve the conflicts. Then, add, commit, and push to your branch. After resolving all conflicts, merge your branch into develop.
     git merge YOURBRANCH
     git push origin develop
-r force .git  -    delete local repository

Activate Environment
------------------------------------------------------------------
| Mac/Linux: | source py3Env/bin/activate                         
------------------------------------------------------------------
| Windows command prompt : | call py3Env\Scripts\activate       
------------------------------------------------------------------
| Windows git bash : | source py3Env/Scripts/activate         
------------------------------------------------------------------




"Ignoring" files from your local repository       -    .gitignore example: see below


The repository is the place where the version control system keeps track of all the changes you make. Most Version Control Systems (VCS) store the current state of the code, along with when each change was made, who made it, and a text log message that explains why they made the change.

You can think of a repository like a bank vault and its history like the ledger. Each time a deposit—what is called a commit in VCS lingo—is made, your VCS tool adds an entry to the ledger and stores the changes for safe keeping.

.git
The presence of a git repo can be defined by a hidden directory named .git, which is created when a new repo is initialized, and contains all meta information regarding that specific repository.  As you get more familiar with git, you may find yourself editing files in there - customizing your options, for example - but for now just know that it's there, and a general idea of what it contains.  If you wish to completely remove a git repo from your file-system, you may simply remove this .git directory.  Understand, that if there is no backup of that repo, then all data - including the project files, commit history, etc -  will be lost.

Working Trees
So far we’ve discussed the repository and talked about all the files you’re storing in it, but we haven’t talked about where you make all of your changes. This happens in your working tree.

The working tree is your current view into the repository. It has all the files from your project: the source code, build files, unit tests, and so on.  The root of your working tree will be the directory that contains the .git directory for your repo.  All files and directories contained from within this root, including directories that get added later, will be considered part of your repo's working tree.  What this means is that files that make up your directory's working tree will be able to be the subject of git commands, such as

     # adds html file to your repo's index, or staging.  this file must exist from within your repo's working tree
     git add index.html
     # adds all files and directories from where your terminal is located, recursively, throughout all sub-directories from your present location.  must be executed from within your repo's working tree.
     git add .
 
These commands will track those files as part of the larger directory, preserved as log entries in your .git directory.

"Ignoring" files from your local repository
There will be times when you may wish to prevent files in your local repository from getting pushed to your remote repository. As few notable cases for this is:

There is sensitive information that you require for development, but do not wish the outside world to see. An example of this would be an API key, say for Google Maps. You need the API key for Google to authenticate your usage of the API, but you do not want this API key to exist on your public GitHub repo. If someone needs your API key, they can get it from you - or get their own. If you need it at some other point in time - say when you are deploying your project - you can just add it then.
Large package directories. There are times where you will be using external development packages that get installed to your Working Tree. It is unnecessary to push what could end up being GBs of external code files up to your remote GitHub repo. Someone could clone your repo, and easily install the required packages themselves.
This can be done by including a simple text file called .gitignore inside your project's root directory (the name of this file - and its location - has to be precise, so that git knows to use it). Then, you add lines to this file for files or directories you wish to ignore from your repository. These files/directories will simply be hidden from the repo itself, and will not get committed/pushed to any remote repository. If a directory is ignored, all of the contents of that directory will be also ignored. The syntax for this file is very simple to pick up, but with pattern-matching can get as complex as you need. Start by understanding the basics, and check out the more powerful stuff as you require.

.gitignore example:
# ignores any file named "secret.txt"
secret.txt
# ignores any directory named "secrets"
secrets/
# ignores a file named "hidden.txt" located at the root of your working directory
/hidden.txt
# ignores a directory called "node_modules" located at the root of your working directory
/node_modules/
# ignores any file with a .png extension
*.png
# ignores any file or directory that begins in "cache", such as cache-file-01, cached_assets/, etc.
cache*
# ignores any file or directory that ends in "data", such as project_data/, big_file_of_data
*data













Sample Workflow
Step 0: Planning
The key in establishing an effective project workflow is communication. Take the time upfront to decide on your workflow “rules”. This will save time and avoid confusion/conflicts.
Decide how your group will keep track of tasks, features, and bugs. (GitHub repository issue tracking** is very useful for this, although, a simple Google Doc or even a list on whiteboard could suffice.)

Step 1: Set Up
One person creates the initial Git repository, pushes it to GitHub, and adds collaborators on the GitHub repository's settings page. All other team members can then clone the repository and add the remote origin (for the original GitHub repository.)

git remote add origin URL
Step 2: Creating a branch
The master branch should always work without errors. A branch of the master, called develop or production would be the branch you mainly work from.

Create branches off from develop for fixes or features, and then push to the develop branch (Step 3).

git checkout -b BRANCHNAME
Move to different branches:

git checkout BRANCHNAME
Check your current branch:

git branch
Keep branch names descriptive. For example, "product-view" or "fix-login-password-error". When working with a team, you can add names to the branches "todd-product-view" or "nikki-fix-login-password-error". Always be aware of the branch you are working on, especially when merging or pushing updates.

Step 3: Merging into the develop branch
Before merging, grab all of the updates from the develop branch onto your own branch and resolve any conflicts.

git pull origin develop
Conflicts will be noted in the terminal. Open the noted local files to resolve the conflicts. Then, add, commit, and push to your branch. After resolving all conflicts, merge your branch into develop.

git checkout develop
git merge YOURBRANCH
git push origin develop
After merging, you can delete the local and remote version of your old branch.

Step 4: Pushing to the master branch
Once the develop branch is ready and working, merge the develop branch into the master, and push to GitHub.
Congratulations! You've just updated a new version of your master project!

**Using GitHub as backlog/bug list:
As you think of features or encounter bugs that are not directly impeding on your current work, add them to the list and keep moving on.
Create custom labels, assign tasks to collaborators, and comment on issues/tasks.
Examples of feature tasks (using the story model): "User should be able to...", "After clicking on a product, the user should see all products with category list." If a feature is huge, break it up into smaller pieces.